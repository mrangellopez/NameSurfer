/*
 * File: NameSurferEntry.java
 * --------------------------
 * This class represents a single entry in the database.  Each
 * NameSurferEntry contains a name and a list giving the popularity
 * of that name for each decade stretching back to 1900.
 */

import acm.util.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class NameSurferEntry implements NameSurferConstants {

	/* Constructor: NameSurferEntry(line) */
	/**
	 * Creates a new NameSurferEntry from a data line as it appears
	 * in the data file.  Each line begins with the name, which is
	 * followed by integers giving the rank of that name for each
	 * decade.
	 */
	public NameSurferEntry(String line) {
		entryString = "";
		for(int i = 0; i < line.length(); i++) {
			char ch = line.charAt(i);
			entryString +=  ch;
		}
		createRankValuesArrayList();
	}

	/* Method: getName() */
	/**
	 * Returns the name associated with this entry.
	 */
	public String getName() {
		char letter = ' ';
		String name = new String("");
		int index = 0;
		while (entryString.charAt(index) != ' ') {
			letter = entryString.charAt(index);
			name += letter;
			index++;
		}
		return name;
	}

	/* Method: getRank(decade) */
	/**
	 * Returns the rank associated with an entry for a particular
	 * decade.  The decade value is an integer indicating how many
	 * decades have passed since the first year in the database,
	 * which is given by the constant START_DECADE.  If a name does
	 * not appear in a decade, the rank value is 0.
	 */
	public int getRank(int decade) {
		int rank = rankValues.get(decade);
		return rank;
	}

	/**
	 * Creates an ArrayList of integers of ranks per decade
	 */
	private void createRankValuesArrayList() {
		rankValues = new ArrayList<Integer>();
		int index = getName().length() + 1; // +1 begins iteration on #, not whitespace
		char digit = ' ';
		String number = "";
		for (int i = index; i < entryString.length(); i++) {
			digit = entryString.charAt(i);
			if(digit != ' ') {
				number += digit;
			} else {
				int nextRank = Integer.parseInt(number);
				rankValues.add(nextRank);
				number = "";				
			}
		}
		int lastRank = Integer.parseInt(number);
		rankValues.add(lastRank);
	}

	/* Method: toString() */
	/**
	 * Returns a string that makes it easy to see the value of a
	 * NameSurferEntry.
	 */
	public String toString() {
		return entryString;
	}

	private ArrayList<Integer> rankValues;
	private String entryString;
}

