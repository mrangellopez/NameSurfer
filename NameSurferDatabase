import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import acm.util.ErrorException;

/*
 * File: NameSurferDataBase.java
 * -----------------------------
 * This class keeps track of the complete database of names.
 * The constructor reads in the database from a file, and
 * the only public method makes it possible to look up a
 * name and get back the corresponding NameSurferEntry.
 * Names are matched independent of case, so that "Eric"
 * and "ERIC" are the same names.
 */

public class NameSurferDataBase implements NameSurferConstants {

	/* Constructor: NameSurferDataBase(filename) */
	/**
	 * Creates a new NameSurferDataBase and initializes it using the data in the
	 * specified file. The constructor throws an error exception if the
	 * requested file does not exist or if an error occurs as the file is being
	 * read.
	 */
	public NameSurferDataBase(String filename) {
		NamesDataBase = new HashMap<String, NameSurferEntry>();
		try {
			BufferedReader reader = new BufferedReader(new FileReader(filename));
			while (true) {
				String line = reader.readLine();
				String name = new String("");
				int i = 0;
				if(line == null) break;
				while (line.charAt(i) != ' ') {
					name += line.charAt(i);
					i++;
				}
				name = name.toLowerCase();
				NameSurferEntry entry = new NameSurferEntry(line);
				NamesDataBase.put(name, entry);
			}
			reader.close();
	} catch (IOException ex) {
		throw new ErrorException(ex);
	}
}

/* Method: findEntry(name) */
/**
 * Returns the NameSurferEntry associated with this name, if one exists. If
 * the name does not appear in the database, this method returns null.
 */
public static NameSurferEntry findEntry(String name) {
	name = name.toLowerCase();
	if(NamesDataBase.containsKey(name)) {
		NameSurferEntry result = NamesDataBase.get(name);
		return result;
	}
	return null;
}

private static Map<String, NameSurferEntry> NamesDataBase;
}
